//Q: 什么是抽象类和抽象成员？
//A: 抽象类(Abstract class)和抽象成员是指只有名字，实质内容缺失的类及其成员。

//Q: 为什么要让类中有内容缺失的成员？
//A: 类中成员内容缺失是因为对这个类来说，执行方法太抽象，没有意义，但是必须提供这么一个方法供派生类继承然后复写。之前我们有一个例子说在图形类中，
  //"画一个图形"是一个很抽象非常没有意义的方法，但是其派生类如圆，矩形依赖基类的Draw()方法的存在来改写成自己的方法。如：
  
public class Shape
{
  public virual void Draw()   //基类的虚方法
  {
    //留空，实在没有执行的内容
  }
}

public class Circle : Shape
{
  public override void Draw()   //复写方法
  {
    Console.WriteLine("Draw a circle.");    //复写逻辑
  }
}

//这种情况下，基类的Draw是一个很抽象的方法，我们就可以直接留空，通过关键词abstract标明其是一个抽象方法。抽象方法没有代码块，并且，抽象的成员只存在
  //抽象的类中，于是这个类也需要关键词abstract来标明。注意，抽象类不能被实例化。以上例子可以改写成以下代码：
    
public abstract class Shape   //现在是抽象类
{
  public abstract void Draw();   //基类的抽象方法，注意没有代码块
}
    
public class Circle : Shape   //继承抽象类
{
  public override void Draw()   //复写抽象方法仍然用关键词override
  {
    Concole.WriteLine("Draw a circle.");    //复写抽象方法中的逻辑
  }
}
    
//另外在复写抽象方法中的类成员的时候需要注意，必须将抽象类的所有抽象成员复写，赋予其实质性的执行内容。
    
//Q: 既然用抽象类有那么多注意和限制，为什么我们要用抽象类及成员？直接定义为正常类中的虚方法然后直接留空不行吗？
//A: 用抽象类及成员的目的是为了强迫自己或其他程序员跟随最初的统一设计。继承一个抽象类，等于强调这个类中的所有方法对于整个程序设计都必不可少，每一个方
  //法都需要针对实际情况仔细小心重新设计。依然以以上例子为例，如果不将基类声明成抽象类，即使其中有虚方法，在对整个程序设计细节不是很了解的情况下，其他
  //程序员仍然可能不去复写Draw()方法而重新为每个派生类声明一个Draw()方法，这必然会走弯路，如用到switch、枚举类型等，让整个程序变得复杂切不易于维护。
    
//暂时想到这么多，最后更新2017/12/1
