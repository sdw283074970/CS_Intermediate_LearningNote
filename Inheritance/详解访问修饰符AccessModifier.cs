//Q: 为什么访问修饰符如此重要？
//A: OOP是C#最重要的目的，从OOP角度思考不难发现修饰符的重要性，这涉及到OOP准则以及著名的"黑箱比喻"。"黑箱比喻"即当我们设计程序的时候，要将程序设计成
  //像黑箱子一样，即从外面看不到里面，只有少数I/O端口代表其功能，至于其中有什么奥秘，外界并不用知道。一个优秀的程序应该像DVD一样，少数的按钮、插槽、显
  //示屏就能让DVD工作，内部的复杂我们并看不到摸不到，不容易将DVD搞坏。如何才能保证我们的程序像一个黑箱子？访问修饰符就是干这个的。

//Q: 如何详细理解每一种访问修饰符？什么情况下会被用到？
//A: 在C#中有五种访问修饰符，即public, private, protected, internal, protected internal。我们分别解释每一个：
  //1.public.最熟悉也最好理解的访问修饰符，即其可见性为所有。一般来说，类、属性、类中的方法、构造器都是public修饰，因为这些都是我们想在其他地方调用的
    //对象，把类本身比作黑箱子的话，属性、类中的方法、构造器都是与外界沟通的桥梁，应该共有；
  //2.private.与public对应，并不是所有都可见，仅仅只有类中才能访问private修饰的对象。一般来说，类中的字段都是私有，我们不想阿猫阿狗都能把黑箱子的基础
    //搞乱，只有黑箱自己知道该如何使用、操作、访问这些变量。有时候我们还有私有类、私有方法等等，总之如果有足够的理由不想让其他程序员写的类胡乱搞乱你的
    //辛勤劳动，请用上私有访问修饰符；
  //3.protected.授予的权限比private稍高一些，除了类中能访问，该类的衍生类也可以访问。比如我们写了一些列有层级关系的类，只想在这些类中互相访问，
    //那么应该用上protected。但是注意，由于任何衍生类都能访问，意味着这个修饰符打破了封装。一些程序员认为protected是个很糟糕的东西，能不用尽量不要用。
    //但实际上在.NET框架中的源代码都在用这个修饰符，所以在下建议，能避免就避免，如果有很充足的理由，但用无妨；
  //4.internal.这个用得不多，权限为仅在相同程序集(可以理解为有多少个Main就有多少个程序集，或DLL)中才能访问，即使在一个程序集中引用了另一个程序集，
    //如果引用的程序集中有internal修饰符，那么也不能访问该修饰符修饰的对象，通常修饰类，
  //5.protected internal.大概是C#中最奇怪的修饰符。权限为protected和internal的或集。很奇怪，一般有充足的理由才使用。

//Q: 什么叫封装？
//A: 简而言之，将不管别的类的事的类和不想让其他类看到的对象藏起来这一过程，叫封装，通常使用private修饰符实现，极少数情况用到其它修饰符。

//暂时想到这么多，最后更新2017/11/29
